import React, { PureComponent } from {quotes}react{quotes};
import { connect } from {quotes}react-redux{quotes};
import PropTypes from {quotes}prop-types{quotes};
//import { Test } from {quotes}./{componentName}.styles{quotes};

class {componentName} extends PureComponent { 
  constructor(props) {
    super(props);

    this.state = {
      demoState: 0,
    };
  }

  componentWillMount = () => {
    console.log('{componentName} will mount');
  }

  componentDidMount = () => {
    console.log('{componentName} mounted');
  }
<legacy>
  componentWillReceiveProps = (nextProps) => {
    console.log('{componentName} will receive props', nextProps);
  }
</legacy>
<reactv16>
  getDerivedStateFromProps = (nextProps, prevState) => {
    console.log('{componentName} getDerivedStateFromProps', nextProps, prevState);
  }
</reactv16>
<legacy>
  componentWillUpdate = (nextProps, nextState) => {
    console.log('{componentName} will update', nextProps, nextState);
  }
</legacy>
<reactv16>
  getSnapshotBeforeUpdate = (prevProps, prevState) => {
    console.log('{componentName} getSnapshotBeforeUpdate', prevProps, prevState);
  }
</reactv16>
  componentDidUpdate = () => {
    console.log('{componentName} did update');
  }

  componentWillUnmount = () => {
    console.log('{componentName} will unmount');
  }

  render () {
    return (
      <div className="{componentName}Wrapper">
        Test content
      </div>
    );
  }
}

{componentName}.propTypes = {
  // bla: PropTypes.string,
};

{componentName}.defaultProps = {
  // bla: 'test',
};

const mapStateToProps = state => ({
  // blabla: state.blabla,
});

const mapDispatchToProps = dispatch => ({
  // fnBlaBla: () => dispatch(action.name()),
});

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)({componentName});
